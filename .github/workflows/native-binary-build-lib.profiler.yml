concurrency:
  cancel-in-progress: true
  group: profiler-${{ github.head_ref || github.run_id }}-${{ github.base_ref }}
jobs:
  build-linux:
    name: Build on Linux
    needs: source
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download sources
      uses: actions/download-artifact@v4
      with:
        name: profiler-external-sources-ASF
    - continue-on-error: true
      name: Build native lib
      run: 'export JDK_HOME=${JAVA_HOME_8_X64}

        #

        #

        echo "Building 64-bit binary"

        rm -f ../../release/lib/deployed/jdk16/linux-amd64/*

        bash -e -x ./buildnative-linux64.sh

        ls -l -R ../../release/lib/deployed/jdk16/linux-amd64

        #

        #

        echo "Building 32-bit binary"

        # Since we are on 64-bit system it means we do not by default have support

        # for creating 32-bit binaries, however this support comes if we install

        # the ''gcc-multilib'' package for GNU C/C++.

        sudo apt-get update

        sudo apt-get install gcc-multilib

        rm -f ../../release/lib/deployed/jdk16/linux/*

        bash -e -x ./buildnative-linux.sh

        ls -l -R ../../release/lib/deployed/jdk16/linux

        #

        #

        echo "done"

        '
      working-directory: profiler/lib.profiler/native/scripts
    - continue-on-error: true
      name: Upload artifact Linux 64 bit
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: linux-amd64
        path: profiler/lib.profiler/release/lib/deployed/jdk16/linux-amd64/
    - continue-on-error: true
      name: Upload artifact Linux 32 bit
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: linux
        path: profiler/lib.profiler/release/lib/deployed/jdk16/linux/
  build-macos:
    name: Build on MacOS
    needs: source
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download sources
      uses: actions/download-artifact@v4
      with:
        name: profiler-external-sources-ASF
    - continue-on-error: true
      name: Build native lib
      run: 'export JDK_HOME=${JAVA_HOME_8_X64}

        #

        #

        echo "Building macOS binary"

        rm -f ../../release/lib/deployed/jdk16/mac/*

        bash -e -x ./buildnative-mac.sh

        ls -l -R ../../release/lib/deployed/jdk16/mac

        #

        #

        echo "done"

        '
      working-directory: profiler/lib.profiler/native/scripts
    - continue-on-error: true
      name: Upload artifact MacOS 64 bit
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: mac
        path: profiler/lib.profiler/release/lib/deployed/jdk16/mac/
  build-windows:
    name: Build on Windows
    needs: source
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download sources
      uses: actions/download-artifact@v4
      with:
        name: profiler-external-sources-ASF
    - continue-on-error: true
      name: Build native lib (64-bit)
      run: 'echo on

        set JDK_HOME=%JAVA_HOME_8_X64%

        echo "Building 64-bit binary"

        set OUTPUTDIR=../../release/lib/deployed/jdk16/windows-amd64

        del /q /s "%OUTPUTDIR%"

        rem  set up a Visual Studio command prompt for 64-bit development

        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        10.0.20348.0

        rem

        rem

        call buildnative-windows64-16.bat

        if exist "%OUTPUTDIR%\profilerinterface.lib" del "%OUTPUTDIR%\profilerinterface.lib"

        if exist "%OUTPUTDIR%\profilerinterface.exp" del "%OUTPUTDIR%\profilerinterface.exp"

        ls -l -R "%OUTPUTDIR%"

        echo "done"

        '
      shell: cmd
      working-directory: profiler/lib.profiler/native/scripts
    - continue-on-error: true
      name: Build native lib (32-bit)
      run: 'echo on

        set JDK_HOME=%JAVA_HOME_8_X64%

        echo "Building 32-bit binary"

        set OUTPUTDIR=../../release/lib/deployed/jdk16/windows

        del /q /s "%OUTPUTDIR%"

        rem   set up a Visual Studio command prompt for 32-bit development

        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
        10.0.20348.0

        rem

        rem

        call buildnative-windows-16.bat

        if exist "%OUTPUTDIR%\profilerinterface.lib" del "%OUTPUTDIR%\profilerinterface.lib"

        if exist "%OUTPUTDIR%\profilerinterface.exp" del "%OUTPUTDIR%\profilerinterface.exp"

        ls -l -R "%OUTPUTDIR%"

        echo "done"

        '
      shell: cmd
      working-directory: profiler/lib.profiler/native/scripts
    - continue-on-error: true
      name: Upload artifact Windows 64 bit
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: windows-amd64
        path: profiler/lib.profiler/release/lib/deployed/jdk16/windows-amd64/
    - continue-on-error: true
      name: Upload artifact Windows 32 bit
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: windows
        path: profiler/lib.profiler/release/lib/deployed/jdk16/windows/
  build-zip-with-build-artifacts:
    name: Package Profiler Libraries
    needs:
    - build-linux
    - build-windows
    - build-macos
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Create dir structure
      run: mkdir -p myfiles/lib/deployed/jdk16
    - continue-on-error: true
      name: Download artifacts from predecessor jobs
      uses: actions/download-artifact@v4
      with:
        path: myfiles/lib/deployed/jdk16
    - continue-on-error: true
      name: Tidy up and display artifacts
      run: 'cp myfiles/lib/deployed/jdk16/profiler-external-sources-ASF/LICENSE myfiles/LICENSE

        cp myfiles/lib/deployed/jdk16/profiler-external-sources-ASF/NOTICE myfiles/NOTICE

        rm -rf myfiles/lib/deployed/jdk16/*sources*

        ls -l -R

        '
    - continue-on-error: true
      name: Create BUILDINFO
      run: 'BUILDINFO="myfiles/BUILDINFO.txt"

        touch "$BUILDINFO"

        echo "Apache NetBeans"                                                >> "$BUILDINFO"

        echo ""                                                               >> "$BUILDINFO"

        echo "Binaries in this ZIP are..."                                    >> "$BUILDINFO"

        echo "Build by GitHub Actions Workflow: ${GITHUB_WORKFLOW}"           >> "$BUILDINFO"

        echo ""                                                               >> "$BUILDINFO"

        echo "Build from:"                                                    >> "$BUILDINFO"

        echo "   Git repo       : ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"  >> "$BUILDINFO"

        echo "   Git commit SHA : ${GITHUB_SHA}"                              >> "$BUILDINFO"

        echo "   Git ref        : ${GITHUB_REF}"                              >> "$BUILDINFO"

        echo ""                                                               >> "$BUILDINFO"

        echo "Build time UTC : $(date --rfc-3339=seconds --utc)"              >> "$BUILDINFO"

        echo ""                                                               >> "$BUILDINFO"

        '
    - continue-on-error: true
      name: Upload bundle
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: profiler-external-binaries-ASF
        path: myfiles/
  source:
    name: Build source zip
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        show-progress: false
        submodules: false
    - continue-on-error: true
      name: Caching dependencies
      uses: actions/cache@v4
      with:
        key: profiler-${{ runner.os }}-${{ hashFiles('*/external/binaries-list', '*/*/external/binaries-list')
          }}
        path: ~/.hgexternalcache
        restore-keys: profiler-${{ runner.os }}-
    - continue-on-error: true
      name: Generate JNI header files
      run: "export JDK_HOME=${JAVA_HOME_8_X64} \necho \"Building NbBuild bootstrap\
        \ (needed for next step)\"\nant bootstrap\necho \"Building lib.profiler module\"\
        \ncd profiler/lib.profiler && ant compile\n"
    - continue-on-error: true
      name: Generate source bundle
      run: 'SOURCES="profiler/lib.profiler/build/sources"

        mkdir -p ${SOURCES}/profiler/lib.profiler

        cp -r profiler/lib.profiler/native/ ${SOURCES}/profiler/lib.profiler/

        cp LICENSE ${SOURCES}/LICENSE

        cp NOTICE ${SOURCES}/NOTICE

        ls -l -R ${SOURCES}

        '
    - continue-on-error: true
      name: Upload native sources
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: profiler-external-sources-ASF
        path: profiler/lib.profiler/build/sources/
name: NetBeans Profiler Libraries
on:
  repository_dispatch:
    types: trigger-ga___native-binary-build-lib.profiler.yml
